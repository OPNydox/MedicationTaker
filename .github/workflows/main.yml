# .github/workflows/create-qa-build-gradle.yml

name: Create QA Build Release (Gradle)

# Allows you to run this workflow manually from the Actions tab
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Build version (e.g., 1.0.0)'
        required: true
        default: '1.0.0'

jobs:
  build-and-release:
    name: Build and Create Release
    permissions:
      contents: write
    
    # This tells GitHub Actions to use a Windows virtual machine
    runs-on: windows-latest

    steps:
      # 1. Checks out your repository's code
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2. Sets up the Java environment
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          # Cache Gradle dependencies to speed up future builds
          cache: 'gradle'

      # 3. Builds the project with Gradle
      # We use 'gradlew.bat' which is the Gradle wrapper for Windows
      # 'build' runs the build task, '-x test' skips running tests
      - name: Build with Gradle
        run: .\gradlew.bat build -x test

      # 4. Creates a GitHub Release and uploads the .jar
      - name: Create Release and Upload JAR
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.event.inputs.version }}-${{ github.run_number }}
          name: "QA Build v${{ github.event.inputs.version }} (${{ github.run_number }})"
          draft: true
          prerelease: true
          
          # CRITICAL CHANGE: Gradle's output is in 'build/libs/'
          files: build/libs/*.jar
